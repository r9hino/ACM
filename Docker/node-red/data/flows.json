[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "664f6501d56f25d2",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.30.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Links",
        "info": "Functions:\n1. https://stevesnoderedguide.com/node-red-functions#:~:text=The%20function%20node%20is%20used,have%20a%20payload%20property%20(msg.\n2. https://nodered.org/docs/user-guide/writing-functions",
        "x": 110,
        "y": 140,
        "wires": []
    },
    {
        "id": "92a859694cc1db1a",
        "type": "pi-gpiod out",
        "z": "f6f2187d.f17ca8",
        "name": "LED",
        "host": "172.30.0.1",
        "port": "8888",
        "pin": "21",
        "set": "",
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "aab621fa420fe2ef",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "func": "\nlet toggle = context.get('toggle') || 0;\n\ncontext.set(\"toggle\", !toggle);\n\nmsg.payload = !toggle;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "92a859694cc1db1a"
            ]
        ]
    },
    {
        "id": "b83b28f1b6461f32",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "aab621fa420fe2ef"
            ]
        ]
    },
    {
        "id": "071f897460c86381",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 320,
        "wires": []
    },
    {
        "id": "b10b49ac048018bd",
        "type": "pi-gpiod in",
        "z": "f6f2187d.f17ca8",
        "name": "Input P38",
        "host": "172.30.0.1",
        "port": 8888,
        "pin": "20",
        "intype": "PUD_OFF",
        "debounce": "100",
        "read": false,
        "x": 80,
        "y": 320,
        "wires": [
            [
                "59ef1bf3df7e6da1"
            ]
        ]
    },
    {
        "id": "14e42e59bb7fd722",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "664f6501d56f25d2",
        "name": "Influxdb",
        "measurement": "flow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "SET",
        "bucket": "rpi-sensors",
        "x": 580,
        "y": 400,
        "wires": []
    },
    {
        "id": "59ef1bf3df7e6da1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Flowmeter - m3/hr",
        "func": "// Only if pulse is positive continue.\nif(msg.payload == 0) return null;\n\n// Set times\nlet actualTime = new Date();\nlet arrTime = flow.get(\"arrTime\") || [];\nlet kCaudal = flow.get(\"kCaudal\");\nlet avgFlow = null;\n\n// Set actual time at the begining of array.\narrTime.unshift(actualTime);\n\n// Keep array length in 10.\nif(arrTime.length > 1){\n    if(arrTime.length > 10) arrTime.pop();\n    \n    // Store time array.\n    flow.set(\"arrTime\", arrTime);\n\n    // Get average flow.\n    // Average flow = NÂ° of pulses * K / Time\n    let msPerSecond = 1000;\n    avgFlow = 3600*msPerSecond*(arrTime.length - 1)*kCaudal/(arrTime[0] - arrTime[arrTime.length - 1]);\n    \n    msg.payload = [\n        {\"m3/hr\": avgFlow},\n        {\"sensor_name\": \"Caudal manifold\"}\n    ];\n\n    return msg;\n}\nelse{\n    // Store time array.\n    flow.set(\"arrTime\", arrTime);\n    // Not enough data.\n    return null;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"kCaudal\", 0.002);",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "071f897460c86381",
                "14e42e59bb7fd722"
            ]
        ]
    }
]