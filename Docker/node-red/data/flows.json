[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d9a37cb13fb749b8",
        "type": "tab",
        "label": "Relays Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "178bc6ee.e87439",
        "type": "soap-config",
        "z": "f6f2187d.f17ca8",
        "wsdl": "http://www.webservicex.net/globalweather.asmx?WSDL",
        "auth": "0",
        "user": "",
        "pass": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "1d0b9627.18e18a",
        "type": "soap-config",
        "z": "f6f2187d.f17ca8",
        "wsdl": "https://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl",
        "auth": "0",
        "user": "",
        "pass": "",
        "key": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "9b0f6def921530a2",
        "type": "soap-config",
        "wsdl": "https://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl",
        "auth": "0",
        "user": "",
        "pass": "",
        "key": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "e763d99e6b688f54",
        "type": "soap-config",
        "wsdl": "http://www.dneonline.com/calculator.asmx?wsdl",
        "auth": "0",
        "user": "",
        "pass": "",
        "key": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "664f6501d56f25d2",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://172.30.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "3bd665b02c1f95c5",
        "type": "socketio-config",
        "host": "http://172.30.0.1",
        "port": "5000",
        "reconnection": true
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Links",
        "info": "Functions:\n1. https://stevesnoderedguide.com/node-red-functions#:~:text=The%20function%20node%20is%20used,have%20a%20payload%20property%20(msg.\n2. https://nodered.org/docs/user-guide/writing-functions",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "aab621fa420fe2ef",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "func": "let toggle = context.get('toggle') || 0;\n\ncontext.set(\"toggle\", !toggle);\n\nmsg.payload = !toggle;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            [
                "92a859694cc1db1a"
            ]
        ]
    },
    {
        "id": "b83b28f1b6461f32",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "aab621fa420fe2ef"
            ]
        ]
    },
    {
        "id": "071f897460c86381",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 220,
        "wires": []
    },
    {
        "id": "59ef1bf3df7e6da1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Flowmeter - m3/hr",
        "func": "// Only if pulse is positive continue.\nif(msg.payload == 0) return null;\n\nconst kVolume = 0.002;                          // Volume constant for each pulse [m3/pulse].\nlet actualTime = new Date();                    // Get actual date.\nlet arrTime = flow.get(\"arrTime\") || [];        // Array to store each pulse date.\nlet counter = flow.get(\"counter\", \"file\") || 0; // Count how many pulse there have been.\nlet avgFlow = null;\n\ncounter = counter + 1;\nflow.set(\"counter\", counter, \"file\");           // Store counter locally in file system.\n\n// Set actual time at the begining of array.\narrTime.unshift(actualTime);\n\n// Do not continue if it has less than 2 elements.\nif(arrTime.length == 1){\n    // Store time array.\n    flow.set(\"arrTime\", arrTime);\n    // Not enough data.\n    return null;\n}\n\n// It will keep array length in 10.\nif(arrTime.length > 10) arrTime.pop();\n\n// Store time array.\nflow.set(\"arrTime\", arrTime);\n\n// Get average flow.\n// Average flow = NÂ° of pulses * K [m3/pulse] / Time[]\nlet msPerSecond = 1000;     // How many miliseconds per seconds.\nvolume = kVolume*counter;\navgFlow = 3600*msPerSecond*(arrTime.length - 1)*kVolume/(arrTime[0] - arrTime[arrTime.length - 1]);\n\nmsg.payload = [\n    [{\"m3\": volume},\n    {\"sensor_name\": \"Volumen bombeado\"}],\n    [{\"m3/hr\": avgFlow},\n    {\"sensor_name\": \"Caudal manifold\"}],\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "071f897460c86381",
                "14e42e59bb7fd722",
                "99a773907df63ea7"
            ]
        ]
    },
    {
        "id": "9e0e25759742e5e9",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "eb18b9c45bf5059b"
            ]
        ]
    },
    {
        "id": "2260a9e3b1ca0715",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb18b9c45bf5059b",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "var newmsg={\n  server:\"https://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl\",\n  options:{},\n  headers:{},\n  payload:{\n      zipCodeList:\"75001\"\n  }\n  \n};\nreturn newmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 440,
        "wires": [
            [
                "b956486a93ef56b8"
            ]
        ]
    },
    {
        "id": "4b5c0df93cf83947",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 560,
        "wires": [
            [
                "0a29abf187a7e08c"
            ]
        ]
    },
    {
        "id": "ada92d4d479c4a1c",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 560,
        "wires": []
    },
    {
        "id": "1256632af093cee6",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 500,
        "wires": [
            [
                "79cd5c104efe0581"
            ]
        ]
    },
    {
        "id": "f09876aeeca69d70",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "e9d4294f96c86070",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "99a773907df63ea7",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "ArgSOAP",
        "func": "// Get data from sensor and send data to SOAP server each x interval of time.\n\nlet A = 0;\nlet B = 0;\n\nlet actualTime = new Date();\nlet prevTime = context.get(\"prevTime\");        // Array to store each pulse date.\n\n// Send informatio if x amount of time has passed.\nif((actualTime - prevTime)/1000 >= 5){\n    if(msg.payload.length >= 2){\n        A = Math.round(msg.payload[0][0][\"m3\"]);\n        B = Math.round(msg.payload[1][0][\"m3/hr\"]);\n    }\n    \n    let newmsg={\n        server:\"http://www.dneonline.com/calculator.asmx?wsdl\",\n        options:{},\n        headers:{},\n        payload:{ intA: A, intB: B}\n    };\n    \n    context.set(\"prevTime\", actualTime);\n\n    return newmsg;    \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"prevTime\", new Date());",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 340,
        "wires": [
            [
                "3fc4bb1ee47fecf3"
            ]
        ]
    },
    {
        "id": "b10b49ac048018bd",
        "type": "pi-gpiod in",
        "z": "f6f2187d.f17ca8",
        "name": "Input P38",
        "host": "172.30.0.1",
        "port": 8888,
        "pin": "20",
        "intype": "PUD_OFF",
        "debounce": "100",
        "read": false,
        "x": 80,
        "y": 220,
        "wires": [
            [
                "59ef1bf3df7e6da1"
            ]
        ]
    },
    {
        "id": "92a859694cc1db1a",
        "type": "pi-gpiod out",
        "z": "f6f2187d.f17ca8",
        "name": "LED",
        "host": "172.30.0.1",
        "port": "8888",
        "pin": "21",
        "set": "",
        "level": "0",
        "out": "out",
        "sermin": "1000",
        "sermax": "2000",
        "freq": "800",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "b956486a93ef56b8",
        "type": "soap request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "",
        "wsdl": "9b0f6def921530a2",
        "method": "LatLonListZipCode",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "2260a9e3b1ca0715"
            ]
        ]
    },
    {
        "id": "3fc4bb1ee47fecf3",
        "type": "soap request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "",
        "wsdl": "e763d99e6b688f54",
        "method": "Add",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "e9d4294f96c86070"
            ]
        ]
    },
    {
        "id": "14e42e59bb7fd722",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "664f6501d56f25d2",
        "name": "Influxdb",
        "measurement": "flow",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "SET",
        "bucket": "rpi-sensors",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "0a29abf187a7e08c",
        "type": "influxdb in",
        "z": "f6f2187d.f17ca8",
        "influxdb": "664f6501d56f25d2",
        "name": "QueryVolume",
        "query": "from(bucket: \"rpi-sensors\")\n    |> range(start: -15d)\n    |> filter(fn: (r) => r[\"sensor_name\"] == \"Temperatura estacion\" or\n                         r[\"sensor_name\"] == \"Caudal manifold\" or\n                         r[\"sensor_name\"] == \"Volumen\")\n    |> last()\n    |> drop(columns:[\"_start\", \"_stop\", \"host\"])",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "SET",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "ada92d4d479c4a1c"
            ]
        ]
    },
    {
        "id": "79cd5c104efe0581",
        "type": "influxdb in",
        "z": "f6f2187d.f17ca8",
        "influxdb": "664f6501d56f25d2",
        "name": "",
        "query": "from(bucket: \"rpi-sensors\")\n    |> range(start: -7d)\n    |> last()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "SET",
        "x": 320,
        "y": 500,
        "wires": [
            [
                "f09876aeeca69d70"
            ]
        ]
    },
    {
        "id": "c66f0abde8f9afbf",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "53dcca35b9c5fb82",
        "type": "socketio-connector",
        "z": "d9a37cb13fb749b8",
        "server": "3bd665b02c1f95c5",
        "namespace": "",
        "name": "ConnectionSocketIO",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "31bd83320157e585",
                "a0cf7b5b85806364"
            ]
        ]
    },
    {
        "id": "31bd83320157e585",
        "type": "socketio-listener",
        "z": "d9a37cb13fb749b8",
        "eventname": "updateClients",
        "name": "",
        "x": 340,
        "y": 460,
        "wires": [
            [
                "3e79ec0569ead0c2"
            ]
        ]
    },
    {
        "id": "a0cf7b5b85806364",
        "type": "socketio-listener",
        "z": "d9a37cb13fb749b8",
        "eventname": "resRelayStates",
        "name": "",
        "x": 340,
        "y": 340,
        "wires": [
            [
                "a027cefaa303db17",
                "353d0ce2f2c764bf"
            ]
        ]
    },
    {
        "id": "316b6333e7f87aed",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "RelayRequestSignal",
        "props": [
            {
                "p": "connectionName",
                "v": "ConnectionSocketIO",
                "vt": "str"
            },
            {
                "p": "eventName",
                "v": "reqRelayStates",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "initialization",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "f817105cc01db224"
            ]
        ]
    },
    {
        "id": "a429d0b16602cee4",
        "type": "socketio-emitter",
        "z": "d9a37cb13fb749b8",
        "name": "reqRelayStates",
        "x": 680,
        "y": 220,
        "wires": []
    },
    {
        "id": "a027cefaa303db17",
        "type": "change",
        "z": "d9a37cb13fb749b8",
        "name": "setRelayStates",
        "rules": [
            {
                "t": "set",
                "p": "relayState",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 340,
        "wires": [
            [
                "105a0042a9fdedd1"
            ]
        ]
    },
    {
        "id": "105a0042a9fdedd1",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "f817105cc01db224",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "RequestingLoop",
        "func": "let arrRelayState = flow.get(\"relayState\");\n\n// If it is initializing, sned inmediately the request for relay states.\nif(msg.topic === \"initialization\"){\n    return msg;\n}\n// Else enter here if msg comes from ProcessLoop.\nelse{\n    // If no relayState have been retrieved yet,\n    // keep sending request for the relay states.\n    if(arrRelayState === undefined || arrRelayState.length === 0){\n        setTimeout(function(){\n            node.send(msg);\n        }, 3000);\n    }\n    else return null;   \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "a429d0b16602cee4",
                "f98a4a1aae06f3c6",
                "0828ad92cecb9193"
            ]
        ]
    },
    {
        "id": "f98a4a1aae06f3c6",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "ProcessLoop",
        "func": "\nmsg.topic = \"loop\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "f817105cc01db224"
            ]
        ]
    },
    {
        "id": "0828ad92cecb9193",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 180,
        "wires": []
    },
    {
        "id": "13ea8a841b9df65f",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "Toggler",
        "func": "let arrRelayState = flow.get(\"relayState\");\n\nif(arrRelayState !== undefined){\n    arrRelayState[0].state = !arrRelayState[0].state;\n    flow.set(\"relayState\", arrRelayState);\n    msg.payload = arrRelayState[0];\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "756c19b72e834f40",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "RelayRequestSignal",
        "props": [
            {
                "p": "connectionName",
                "v": "ConnectionSocketIO",
                "vt": "str"
            },
            {
                "p": "eventName",
                "v": "elementChanged",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "x": 140,
        "y": 640,
        "wires": [
            [
                "13ea8a841b9df65f"
            ]
        ]
    },
    {
        "id": "4084b993b0f7f501",
        "type": "socketio-emitter",
        "z": "d9a37cb13fb749b8",
        "name": "elementChanged",
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "3e79ec0569ead0c2",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "StoreUpdatedRelayState",
        "func": "let arrRelayState = flow.get(\"relayState\");\n\nif(arrRelayState === undefined) return null;\n\nlet updatedRelayState = msg.payload;   // Get relay state who was updated.\n\n// Get index of updated relay \nlet relayIndex = arrRelayState.findIndex(relay => relay.id === updatedRelayState.id);\narrRelayState[relayIndex] = updatedRelayState;\n\nflow.set(\"relayState\", arrRelayState);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "c66f0abde8f9afbf",
                "1f9d51a8cfec1021"
            ]
        ]
    },
    {
        "id": "6e3c2a66aba52f94",
        "type": "comment",
        "z": "d9a37cb13fb749b8",
        "name": "Request all relay states from server, and keep trying until they are retrieved.",
        "info": "",
        "x": 280,
        "y": 140,
        "wires": []
    },
    {
        "id": "e4ecc70cb00826bc",
        "type": "comment",
        "z": "d9a37cb13fb749b8",
        "name": "Receive responses from initial states request, or if a relay was changed from another place.",
        "info": "",
        "x": 330,
        "y": 300,
        "wires": []
    },
    {
        "id": "eb919bac3adf7b79",
        "type": "comment",
        "z": "d9a37cb13fb749b8",
        "name": "Here socket.io work as a client, and can listen or emit data.",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "9ac895f2bcad3593",
        "type": "i2c scan",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "busno": "1",
        "x": 340,
        "y": 720,
        "wires": [
            [
                "16fc4ef2b073bc2b"
            ],
            []
        ]
    },
    {
        "id": "65c68c4656ba4c2a",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 720,
        "wires": [
            [
                "9ac895f2bcad3593",
                "7d3d77cfc89ae431"
            ]
        ]
    },
    {
        "id": "16fc4ef2b073bc2b",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 700,
        "wires": []
    },
    {
        "id": "0d5992623ba620cd",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 780,
        "wires": []
    },
    {
        "id": "7d3d77cfc89ae431",
        "type": "i2c in",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "busno": "1",
        "address": "36",
        "command": "",
        "count": "1",
        "x": 330,
        "y": 780,
        "wires": [
            [
                "0d5992623ba620cd"
            ]
        ]
    },
    {
        "id": "a232dd8de29cf1e4",
        "type": "i2c out",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "busno": "1",
        "address": "36",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "b27d490d5b33c6f1"
            ]
        ]
    },
    {
        "id": "71077baa8d164c52",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "127",
        "payloadType": "num",
        "x": 90,
        "y": 840,
        "wires": [
            [
                "bc14114c156cb004"
            ]
        ]
    },
    {
        "id": "b27d490d5b33c6f1",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 840,
        "wires": []
    },
    {
        "id": "141b44d6cc524bae",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 880,
        "wires": [
            [
                "bc14114c156cb004"
            ]
        ]
    },
    {
        "id": "bc14114c156cb004",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "WorkaroundSigned2Unsigned",
        "func": "msg.payload = msg.payload > 127 ? msg.payload - 256 : msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 840,
        "wires": [
            [
                "a232dd8de29cf1e4"
            ]
        ]
    },
    {
        "id": "384bbc96e5ccf427",
        "type": "inject",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "255",
        "payloadType": "num",
        "x": 90,
        "y": 800,
        "wires": [
            [
                "bc14114c156cb004"
            ]
        ]
    },
    {
        "id": "00cc2f786fc2c6a1",
        "type": "i2c out",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "busno": "1",
        "address": "36",
        "command": "",
        "payload": "payload",
        "payloadType": "msg",
        "count": "1",
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "177f76e73d7c5c41"
            ]
        ]
    },
    {
        "id": "177f76e73d7c5c41",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 380,
        "wires": []
    },
    {
        "id": "32572b972980d6a9",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "WorkaroundSigned2Unsigned",
        "func": "msg.payload = msg.payload > 127 ? msg.payload - 256 : msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "00cc2f786fc2c6a1"
            ]
        ],
        "info": "Workaround for solving an I2C issue when address is greater than 127. For some reason it throw erros."
    },
    {
        "id": "1f9d51a8cfec1021",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "GetI2CPortMask",
        "func": "let i2cPortMask = flow.get(\"I2CPortMask\");\nlet updatedRelayState = msg.payload;\n\n \nif(updatedRelayState.state === true && updatedRelayState.protocol === 'i2c'){\n    let bitwisePort = 0b00000001 << updatedRelayState.port;\n    i2cPortMask = i2cPortMask | bitwisePort;\n}\nelse if(updatedRelayState.state === false && updatedRelayState.protocol === 'i2c'){\n    let bitwisePort = ~(0b00000001 << updatedRelayState.port);\n    i2cPortMask = i2cPortMask & bitwisePort;\n}\n\nflow.set(\"I2CPortMask\", i2cPortMask);\n\nmsg.payload = i2cPortMask;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "32572b972980d6a9",
                "cdf71e67c7eb3689"
            ]
        ]
    },
    {
        "id": "353d0ce2f2c764bf",
        "type": "function",
        "z": "d9a37cb13fb749b8",
        "name": "SetI2CPortMask",
        "func": "let arrRelayState = msg.payload;\n\nif(arrRelayState === undefined || arrRelayState === null) return;\n\nlet i2cPortMask = 0b00000000;\n\n// Iterate over all relays.\nfor(const relay of arrRelayState){\n    // Convert from port 0 true  -> 0b00000001\n    //                   3 true  -> 0b00001000\n    //                   4 false -> 0b00000000\n    //                   7 true  -> 0b10000000\n    //                     Mask  -> 0b10001001\n    if(relay.state === true && relay.protocol === 'i2c'){\n        let bitwisePort = 0b00000001 << relay.port;\n        i2cPortMask = i2cPortMask | bitwisePort;\n    }\n}\n\nflow.set(\"I2CPortMask\", i2cPortMask);\nmsg.payload = i2cPortMask;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "1f5efb05b7845817",
                "32572b972980d6a9"
            ]
        ]
    },
    {
        "id": "1f5efb05b7845817",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "cdf71e67c7eb3689",
        "type": "debug",
        "z": "d9a37cb13fb749b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 460,
        "wires": []
    }
]